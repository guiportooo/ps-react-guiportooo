{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","utils/percentUtils.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/TextInputCSSModules/textInput.module.css","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100PercentHeight20px.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/Example.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","_ref","htmlFor","label","required","react_default","a","createElement","style","display","color","__webpack_require__","d","__webpack_exports__","components_Label_Label","getWidthAsPercentOfTotalWidth","percent","totalWidth","parseInt","ProgressBar","getColor","_this","props","_this$props","width","_this$props2","this","height","border","backgroundColor","React","Component","defaultProps","components_ProgressBar_ProgressBar","TextInput","htmlId","_ref$required","_ref$type","type","name","placeholder","value","onChange","error","children","Object","objectWithoutProperties","marginBottom","assign","id","className","components_TextInput_TextInput","EyeIcon","xmlns","viewBox","transform","fill","cx","cy","r","components_EyeIcon_EyeIcon","PasswordInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleShowPassword","event","preventDefault","setState","prevState","showPassword","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","length","components_PasswordInput_PasswordInput","module","exports","inputError","fieldset","description","code","examples","message","defaultValue","computed","confirmationMessage","onSubmit","minPasswordLength","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_guiportooo_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","Example","ps_react_guiportooo_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleOptional","ExampleRequired","ExampleAllFeatures","_Users_guilhermeporto_Projects_Estudos_React_ps_react_guiportooo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_guilhermeporto_Projects_Estudos_React_ps_react_guiportooo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_guilhermeporto_Projects_Estudos_React_ps_react_guiportooo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","handleChange","password","target","react__WEBPACK_IMPORTED_MODULE_5___default","ps_react_guiportooo_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","minLength","getQuality","ps_react_guiportooo_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","Example100PercentHeight20px","Example10Percent","Example70Percent","ps_react_guiportooo_TextInput__WEBPACK_IMPORTED_MODULE_1__","ExampleError","RegistrationForm","user","validate","submitted","email","errors","concat","getOwnPropertyNames","_this$state","_this$state$user","passwordQuality","components_RegistrationForm_RegistrationForm","console","log","Fieldset","styled","div","_templateObject","Input","input","_templateObject2","Error","_templateObject3","TextInputStyledComponents","components_TextInputStyledComponents_TextInputStyledComponents","TextInputCSSModules","styles","components_TextInputCSSModules_TextInputCSSModules","HelloWorld","ExampleHelloWorld","components_HelloWorld_HelloWorld","TextInputBEM","components_TextInputBEM_TextInputBEM","map","./EyeIcon/Example","./EyeIcon/Example.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100PercentHeight20px","./ProgressBar/Example100PercentHeight20px.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationForm/Example","./RegistrationForm/Example.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","webpackContext","req","webpackContextResolve","e","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","toggleCode","showCode","_this$props$example","example","ExampleComponent","require","componentName","default","docs_CodeExample","Props","ComponentPage","component","docs_Example","docs_Props","Docs","route","window","location","hash","substr","_this2","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","Boolean","hostname","match","ReactDOM","render","Docs_Docs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb56d5fd.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Label with required field display, htmlFor and block styling */\nconst Label = ({ htmlFor, label, required }) => (\n  <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n    {label} {required && <span style={{ color: \"red\" }}>*</span>}\n  </label>\n);\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n  /** Label text */\n  label: PropTypes.string.isRequired,\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export { default } from \"./Label.js\";\n","// Returns the width of a percent of total width, as an integer\nconst getWidthAsPercentOfTotalWidth = (percent, totalWidth) =>\n  parseInt(totalWidth * (percent / 100), 10);\n\nexport { getWidthAsPercentOfTotalWidth };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getWidthAsPercentOfTotalWidth } from \"../../utils/percentUtils\";\n\nclass ProgressBar extends React.Component {\n  static propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n    /** Bar height */\n    height: PropTypes.number\n  };\n\n  static defaultProps = {\n    height: 5\n  };\n\n  getColor = () => {\n    const { percent } = this.props;\n    if (percent === 100) return \"green\";\n    return percent > 50 ? \"lightgreen\" : \"red\";\n  };\n\n  getWidthAsPercentOfTotalWidth = () => {\n    const { width, percent } = this.props;\n    return getWidthAsPercentOfTotalWidth(percent, width);\n  };\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <div style={{ border: \"solid 1px lightgray\", width }}>\n        <div\n          style={{\n            width: this.getWidthAsPercentOfTotalWidth(),\n            height,\n            backgroundColor: this.getColor()\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ProgressBar;\n","export { default } from \"./ProgressBar.js\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInput = ({\n  htmlId,\n  label,\n  required = false,\n  type = \"text\",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <div style={{ marginBottom: 16 }}>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      style={error && { border: \"solid 1px red\" }}\n      {...props}\n    />\n    {children}\n    {error && (\n      <div className=\"error\" style={{ color: \"red\" }}>\n        {error}\n      </div>\n    )}\n  </div>\n);\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export { default } from \"./TextInput.js\";\n","import React from \"react\";\n\n/** SVG Eye Icon */\nconst EyeIcon = () => {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 22 22\"\n    >\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default EyeIcon;\n","export { default } from \"./EyeIcon.js\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../TextInput\";\nimport EyeIcon from \"../EyeIcon\";\nimport ProgressBar from \"../ProgressBar\";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  static propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input label */\n    label: PropTypes.string,\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n    name: PropTypes.string.isRequired,\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n    /** Password value */\n    value: PropTypes.any,\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n    /** Validation error to display */\n    error: PropTypes.string,\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool\n  };\n\n  static defaultProps = {\n    maxLength: 50,\n    showVisibilityToggle: false,\n    label: \"Password\"\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showPassword: false\n    };\n  }\n\n  toggleShowPassword = event => {\n    if (event) event.preventDefault();\n\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n  };\n\n  render() {\n    const {\n      htmlId,\n      label,\n      name,\n      placeholder,\n      value,\n      error,\n      onChange,\n      maxLength,\n      showVisibilityToggle,\n      quality,\n      ...props\n    } = this.props;\n\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        onChange={onChange}\n        type={showPassword ? \"text\" : \"password\"}\n        required\n        {...props}\n      >\n        {showVisibilityToggle && (\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            <EyeIcon />\n          </a>\n        )}\n        {value.length > 0 && quality && (\n          <ProgressBar percent={quality} width={130} />\n        )}\n      </TextInput>\n    );\n  }\n}\n\nexport default PasswordInput;\n","export { default } from \"./PasswordInput.js\";\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__3lLsy\",\"inputError\":\"textInput_inputError__2y0zN\",\"fieldset\":\"textInput_fieldset__15Kb2\"};","module.exports =\n/* eslint-disable */\n[{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from \\\"react\\\";\\n\\n/** SVG Eye Icon */\\nconst EyeIcon = () => {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg\\n      width=\\\"16\\\"\\n      height=\\\"16\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 0 22 22\\\"\\n    >\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  );\\n};\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport EyeIcon from \\\"ps-react-guiportooo/EyeIcon\\\";\\n\\nconst Example = () => <EyeIcon />;\\n\\nexport default Example;\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super lame component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport Proptypes from \\\"prop-types\\\";\\n\\n/** A super lame component that says Hello with a custom message. */\\nconst HelloWorld = ({ message }) => <div>Hello {message}</div>;\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: Proptypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  message: \\\"World\\\"\\n};\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from \\\"react\\\";\\nimport HelloWorld from \\\"ps-react-guiportooo/HelloWorld\\\";\\n\\n/** Custom message */\\nconst ExampleHelloWorld = () => <HelloWorld message=\\\"Pluralsight viewers!\\\" />;\\n\\nexport default ExampleHelloWorld;\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** Label with required field display, htmlFor and block styling */\\nconst Label = ({ htmlFor, label, required }) => (\\n  <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\n    {label} {required && <span style={{ color: \\\"red\\\" }}>*</span>}\\n  </label>\\n);\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"ps-react-guiportooo/Label\\\";\\n\\nconst ExampleOptional = () => <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\n\\nexport default ExampleOptional;\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"ps-react-guiportooo/Label\\\";\\n\\nconst ExampleRequired = () => <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />;\\n\\nexport default ExampleRequired;\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Password\\\"\",\n        \"computed\": false\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport TextInput from \\\"../TextInput\\\";\\nimport EyeIcon from \\\"../EyeIcon\\\";\\nimport ProgressBar from \\\"../ProgressBar\\\";\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  static propTypes = {\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n    htmlId: PropTypes.string.isRequired,\\n    /** Input label */\\n    label: PropTypes.string,\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n    name: PropTypes.string.isRequired,\\n    /** Placeholder displayed when no password is entered */\\n    placeholder: PropTypes.string,\\n    /** Password value */\\n    value: PropTypes.any,\\n    /** Max password length accepted */\\n    maxLength: PropTypes.number,\\n    /** Function called when password input value changes */\\n    onChange: PropTypes.func.isRequired,\\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n    quality: PropTypes.number,\\n    /** Validation error to display */\\n    error: PropTypes.string,\\n    /** Set to true to show the toggle for displaying the currently entered password */\\n    showVisibilityToggle: PropTypes.bool\\n  };\\n\\n  static defaultProps = {\\n    maxLength: 50,\\n    showVisibilityToggle: false,\\n    label: \\\"Password\\\"\\n  };\\n\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      showPassword: false\\n    };\\n  }\\n\\n  toggleShowPassword = event => {\\n    if (event) event.preventDefault();\\n\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n  };\\n\\n  render() {\\n    const {\\n      htmlId,\\n      label,\\n      name,\\n      placeholder,\\n      value,\\n      error,\\n      onChange,\\n      maxLength,\\n      showVisibilityToggle,\\n      quality,\\n      ...props\\n    } = this.props;\\n\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        onChange={onChange}\\n        type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\n        required\\n        {...props}\\n      >\\n        {showVisibilityToggle && (\\n          <a\\n            href=\\\"#\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}\\n          >\\n            <EyeIcon />\\n          </a>\\n        )}\\n        {value.length > 0 && quality && (\\n          <ProgressBar percent={quality} width={130} />\\n        )}\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport PasswordInput from \\\"ps-react-guiportooo/PasswordInput\\\";\\n\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: \\\"\\\"\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  handleChange = event => {\\n    this.setState({ password: event.target.value });\\n  };\\n\\n  render() {\\n    const { password } = this.state;\\n\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"example-all-features\\\"\\n          name=\\\"password\\\"\\n          placeholder=\\\"Enter password\\\"\\n          minLength={8}\\n          value={password}\\n          showVisibilityToggle\\n          onChange={this.handleChange}\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nclass ProgressBar extends React.Component {\\n  static propTypes = {\\n    /** Percent of progress completed */\\n    percent: PropTypes.number.isRequired,\\n    /** Bar width */\\n    width: PropTypes.number.isRequired,\\n    /** Bar height */\\n    height: PropTypes.number\\n  };\\n\\n  static defaultProps = {\\n    height: 5\\n  };\\n\\n  getColor = () => {\\n    const { percent } = this.props;\\n    if (percent === 100) return \\\"green\\\";\\n    return percent > 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\n  };\\n\\n  getWidthAsPercentOfTotalWidht = () => {\\n    const { width, percent } = this.props;\\n    return parseInt(width * (percent / 100), 10);\\n  };\\n\\n  render() {\\n    const { width, height } = this.props;\\n    return (\\n      <div style={{ border: \\\"solid 1px lightgray\\\", width }}>\\n        <div\\n          style={{\\n            width: this.getWidthAsPercentOfTotalWidht(),\\n            height,\\n            backgroundColor: this.getColor()\\n          }}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": [{\n    \"name\": \"Example100PercentHeight20px\",\n    \"description\": \"100% progress and height 20px\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react-guiportooo/ProgressBar\\\";\\n\\n/** 100% progress and height 20px */\\nconst Example100PercentHeight20px = () => (\\n  <ProgressBar percent={100} width={150} height={20} />\\n);\\n\\nexport default Example100PercentHeight20px;\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react-guiportooo/ProgressBar\\\";\\n\\n/** 10% progress */\\nconst Example10Percent = () => <ProgressBar percent={10} width={150} />;\\n\\nexport default Example10Percent;\\n\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react-guiportooo/ProgressBar\\\";\\n\\n/** 70% progress */\\nconst Example70Percent = () => <ProgressBar percent={70} width={150} />;\\n\\nexport default Example70Percent;\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport TextInput from \\\"../TextInput\\\";\\nimport PasswordInput from \\\"../PasswordInput\\\";\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  static propTypes = {\\n    /** Message displayed upon successful submission */\\n    confirmationMessage: PropTypes.string,\\n    /** Called when form is submitted */\\n    onSubmit: PropTypes.func.isRequired,\\n    /** Minimum password length */\\n    minPasswordLength: PropTypes.number\\n  };\\n\\n  static defaultProps = {\\n    confirmationMessage: \\\"Thanks for registering!\\\",\\n    minPasswordLength: 8\\n  };\\n\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: \\\"\\\",\\n        password: \\\"\\\"\\n      },\\n      errors: {},\\n      submitted: false\\n    };\\n  }\\n\\n  onChange = event => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({ user });\\n  };\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    const { minPasswordLength } = this.props;\\n\\n    if (password.length >= minPasswordLength) return 100;\\n\\n    const percentageOfMinLength = parseInt(\\n      (password.length / minPasswordLength) * 100,\\n      10\\n    );\\n    return percentageOfMinLength;\\n  }\\n\\n  validate({ email, password }) {\\n    const errors = {};\\n    const { minPasswordLength } = this.props;\\n\\n    if (!email) errors.email = \\\"Email required\\\";\\n    if (password.length < minPasswordLength)\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({ errors });\\n\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const { user } = this.state;\\n    const formIsValid = this.validate(user);\\n\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({ submitted: true });\\n    }\\n  };\\n\\n  render() {\\n    const { confirmationMessage } = this.props;\\n    const { errors, submitted } = this.state;\\n    const { email, password } = this.state.user;\\n\\n    return submitted ? (\\n      <h2>{confirmationMessage}</h2>\\n    ) : (\\n      <form>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          onChange={this.onChange}\\n          required\\n        />\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          maxLength={50}\\n          quality={this.passwordQuality(password)}\\n          error={errors.password}\\n          onChange={this.onChange}\\n          showVisibilityToggle\\n        />\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </form>\\n    );\\n  }\\n}\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport RegistrationForm from \\\"ps-react-guiportooo/RegistrationForm\\\";\\n\\nconst Example = () => {\\n  const onSubmit = user => console.log(user);\\n\\n  return <RegistrationForm onSubmit={onSubmit} />;\\n};\\n\\nexport default Example;\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nconst TextInput = ({\\n  htmlId,\\n  label,\\n  required = false,\\n  type = \\\"text\\\",\\n  name,\\n  placeholder,\\n  value,\\n  onChange,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div style={{ marginBottom: 16 }}>\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      style={error && { border: \\\"solid 1px red\\\" }}\\n      {...props}\\n    />\\n    {children}\\n    {error && (\\n      <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\n        {error}\\n      </div>\\n    )}\\n  </div>\\n);\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextInput with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react-guiportooo/TextInput\\\";\\n\\n/** Required TextInput with error */\\nconst ExampleError = () => (\\n  <TextInput\\n    htmlId=\\\"example-error\\\"\\n    label=\\\"First Name\\\"\\n    name=\\\"firstname\\\"\\n    onChange={() => {}}\\n    required\\n    error=\\\"First name is required.\\\"\\n  />\\n);\\n\\nexport default ExampleError;\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextInput\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react-guiportooo/TextInput\\\";\\n\\n/** Optional TextInput */\\nconst ExampleOptional = () => (\\n  <TextInput\\n    htmlId=\\\"example-optional\\\"\\n    label=\\\"First Name\\\"\\n    name=\\\"firstname\\\"\\n    onChange={() => {}}\\n  />\\n);\\n\\nexport default ExampleOptional;\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nconst TextInputBEM = ({\\n  htmlId,\\n  label,\\n  required = false,\\n  type = \\\"text\\\",\\n  name,\\n  placeholder,\\n  value,\\n  onChange,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div className=\\\"textinput\\\">\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      className={error && \\\"textinput__input--state-error\\\"}\\n      {...props}\\n    />\\n    {children}\\n    {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n  </div>\\n);\\n\\nTextInputBEM.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputBEM;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextInput with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputBEM from \\\"ps-react-guiportooo/TextInputBEM\\\";\\n\\n/** Required TextInput with error */\\nconst ExampleError = () => (\\n  <TextInputBEM\\n    htmlId=\\\"example-error\\\"\\n    label=\\\"First Name\\\"\\n    name=\\\"firstname\\\"\\n    onChange={() => {}}\\n    required\\n    error=\\\"First name is required.\\\"\\n  />\\n);\\n\\nexport default ExampleError;\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styles from \\\"./textInput.module.css\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nconst TextInputCSSModules = ({\\n  htmlId,\\n  label,\\n  required = false,\\n  type = \\\"text\\\",\\n  name,\\n  placeholder,\\n  value,\\n  onChange,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <div className={styles.fieldset}>\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      className={error && styles.inputError}\\n      {...props}\\n    />\\n    {children}\\n    {error && <div className={styles.error}>{error}</div>}\\n  </div>\\n);\\n\\nTextInputCSSModules.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputCSSModules;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextInput with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputCSSModules from \\\"ps-react-guiportooo/TextInputCSSModules\\\";\\n\\n/** Required TextInput with error */\\nconst ExampleError = () => (\\n  <TextInputCSSModules\\n    htmlId=\\\"example-error\\\"\\n    label=\\\"First Name\\\"\\n    name=\\\"firstname\\\"\\n    onChange={() => {}}\\n    required\\n    error=\\\"First name is required.\\\"\\n  />\\n);\\n\\nexport default ExampleError;\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\nimport styled from \\\"styled-components\\\";\\n\\nconst Fieldset = styled.div`\\n  margin-bottom: 16px;\\n`;\\n\\nconst Input = styled.input`\\n  display: block;\\n  border: ${props => props.error && \\\"solid 1px red\\\"};\\n`;\\n\\nconst Error = styled.div`\\n  color: red;\\n`;\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nconst TextInputStyledComponents = ({\\n  htmlId,\\n  label,\\n  required = false,\\n  type = \\\"text\\\",\\n  name,\\n  placeholder,\\n  value,\\n  onChange,\\n  error,\\n  children,\\n  ...props\\n}) => (\\n  <Fieldset>\\n    <Label htmlFor={htmlId} label={label} required={required} />\\n    <Input\\n      id={htmlId}\\n      type={type}\\n      name={name}\\n      placeholder={placeholder}\\n      value={value}\\n      onChange={onChange}\\n      error={error}\\n      {...props}\\n    />\\n    {children}\\n    {error && <Error>{error}</Error>}\\n  </Fieldset>\\n);\\n\\nTextInputStyledComponents.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n  /** Value */\\n  value: PropTypes.any,\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInputStyledComponents;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextInput with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInputStyledComponents from \\\"ps-react-guiportooo/TextInputStyledComponents\\\";\\n\\n/** Required TextInput with error */\\nconst ExampleError = () => (\\n  <TextInputStyledComponents\\n    htmlId=\\\"example-error\\\"\\n    label=\\\"First Name\\\"\\n    name=\\\"firstname\\\"\\n    onChange={() => {}}\\n    required\\n    error=\\\"First name is required.\\\"\\n  />\\n);\\n\\nexport default ExampleError;\\n\"\n  }]\n}];","import React from \"react\";\nimport EyeIcon from \"ps-react-guiportooo/EyeIcon\";\n\nconst Example = () => <EyeIcon />;\n\nexport default Example;\n","import React from \"react\";\nimport Label from \"ps-react-guiportooo/Label\";\n\nconst ExampleOptional = () => <Label htmlFor=\"test\" label=\"test\" />;\n\nexport default ExampleOptional;\n","import React from \"react\";\nimport Label from \"ps-react-guiportooo/Label\";\n\nconst ExampleRequired = () => <Label htmlFor=\"test\" label=\"test\" required />;\n\nexport default ExampleRequired;\n","import React from \"react\";\nimport PasswordInput from \"ps-react-guiportooo/PasswordInput\";\n\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: \"\"\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  handleChange = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    const { password } = this.state;\n\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"example-all-features\"\n          name=\"password\"\n          placeholder=\"Enter password\"\n          minLength={8}\n          value={password}\n          showVisibilityToggle\n          onChange={this.handleChange}\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from \"react\";\nimport ProgressBar from \"ps-react-guiportooo/ProgressBar\";\n\n/** 100% progress and height 20px */\nconst Example100PercentHeight20px = () => (\n  <ProgressBar percent={100} width={150} height={20} />\n);\n\nexport default Example100PercentHeight20px;\n","import React from \"react\";\nimport ProgressBar from \"ps-react-guiportooo/ProgressBar\";\n\n/** 10% progress */\nconst Example10Percent = () => <ProgressBar percent={10} width={150} />;\n\nexport default Example10Percent;\n","import React from \"react\";\nimport ProgressBar from \"ps-react-guiportooo/ProgressBar\";\n\n/** 70% progress */\nconst Example70Percent = () => <ProgressBar percent={70} width={150} />;\n\nexport default Example70Percent;\n","import React from \"react\";\nimport TextInput from \"ps-react-guiportooo/TextInput\";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInput\n    htmlId=\"example-error\"\n    label=\"First Name\"\n    name=\"firstname\"\n    onChange={() => {}}\n    required\n    error=\"First name is required.\"\n  />\n);\n\nexport default ExampleError;\n","import React from \"react\";\nimport TextInput from \"ps-react-guiportooo/TextInput\";\n\n/** Optional TextInput */\nconst ExampleOptional = () => (\n  <TextInput\n    htmlId=\"example-optional\"\n    label=\"First Name\"\n    name=\"firstname\"\n    onChange={() => {}}\n  />\n);\n\nexport default ExampleOptional;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../TextInput\";\nimport PasswordInput from \"../PasswordInput\";\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  static propTypes = {\n    /** Message displayed upon successful submission */\n    confirmationMessage: PropTypes.string,\n    /** Called when form is submitted */\n    onSubmit: PropTypes.func.isRequired,\n    /** Minimum password length */\n    minPasswordLength: PropTypes.number\n  };\n\n  static defaultProps = {\n    confirmationMessage: \"Thanks for registering!\",\n    minPasswordLength: 8\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: \"\",\n        password: \"\"\n      },\n      errors: {},\n      submitted: false\n    };\n  }\n\n  onChange = event => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  };\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    const { minPasswordLength } = this.props;\n\n    if (password.length >= minPasswordLength) return 100;\n\n    const percentageOfMinLength = parseInt(\n      (password.length / minPasswordLength) * 100,\n      10\n    );\n    return percentageOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = \"Email required\";\n    if (password.length < minPasswordLength)\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  };\n\n  render() {\n    const { confirmationMessage } = this.props;\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return submitted ? (\n      <h2>{confirmationMessage}</h2>\n    ) : (\n      <form>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          onChange={this.onChange}\n          required\n        />\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          maxLength={50}\n          quality={this.passwordQuality(password)}\n          error={errors.password}\n          onChange={this.onChange}\n          showVisibilityToggle\n        />\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </form>\n    );\n  }\n}\n\nexport default RegistrationForm;\n","import React from \"react\";\nimport RegistrationForm from \"ps-react-guiportooo/RegistrationForm\";\n\nconst Example = () => {\n  const onSubmit = user => console.log(user);\n\n  return <RegistrationForm onSubmit={onSubmit} />;\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styled from \"styled-components\";\n\nconst Fieldset = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst Input = styled.input`\n  display: block;\n  border: ${props => props.error && \"solid 1px red\"};\n`;\n\nconst Error = styled.div`\n  color: red;\n`;\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInputStyledComponents = ({\n  htmlId,\n  label,\n  required = false,\n  type = \"text\",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <Fieldset>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <Input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      error={error}\n      {...props}\n    />\n    {children}\n    {error && <Error>{error}</Error>}\n  </Fieldset>\n);\n\nTextInputStyledComponents.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledComponents;\n","import React from \"react\";\nimport TextInputStyledComponents from \"ps-react-guiportooo/TextInputStyledComponents\";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInputStyledComponents\n    htmlId=\"example-error\"\n    label=\"First Name\"\n    name=\"firstname\"\n    onChange={() => {}}\n    required\n    error=\"First name is required.\"\n  />\n);\n\nexport default ExampleError;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\nimport styles from \"./textInput.module.css\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInputCSSModules = ({\n  htmlId,\n  label,\n  required = false,\n  type = \"text\",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <div className={styles.fieldset}>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={error && styles.inputError}\n      {...props}\n    />\n    {children}\n    {error && <div className={styles.error}>{error}</div>}\n  </div>\n);\n\nTextInputCSSModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCSSModules;\n","import React from \"react\";\nimport TextInputCSSModules from \"ps-react-guiportooo/TextInputCSSModules\";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInputCSSModules\n    htmlId=\"example-error\"\n    label=\"First Name\"\n    name=\"firstname\"\n    onChange={() => {}}\n    required\n    error=\"First name is required.\"\n  />\n);\n\nexport default ExampleError;\n","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\n/** A super lame component that says Hello with a custom message. */\nconst HelloWorld = ({ message }) => <div>Hello {message}</div>;\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: Proptypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: \"World\"\n};\nexport default HelloWorld;\n","import React from \"react\";\nimport HelloWorld from \"ps-react-guiportooo/HelloWorld\";\n\n/** Custom message */\nconst ExampleHelloWorld = () => <HelloWorld message=\"Pluralsight viewers!\" />;\n\nexport default ExampleHelloWorld;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInputBEM = ({\n  htmlId,\n  label,\n  required = false,\n  type = \"text\",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <div className=\"textinput\">\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={error && \"textinput__input--state-error\"}\n      {...props}\n    />\n    {children}\n    {error && <div className=\"textinput__error\">{error}</div>}\n  </div>\n);\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;\n","import React from \"react\";\nimport TextInputBEM from \"ps-react-guiportooo/TextInputBEM\";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInputBEM\n    htmlId=\"example-error\"\n    label=\"First Name\"\n    name=\"firstname\"\n    onChange={() => {}}\n    required\n    error=\"First name is required.\"\n  />\n);\n\nexport default ExampleError;\n","var map = {\n\t\"./EyeIcon/Example\": 22,\n\t\"./EyeIcon/Example.js\": 22,\n\t\"./HelloWorld/ExampleHelloWorld\": 34,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 34,\n\t\"./Label/ExampleOptional\": 23,\n\t\"./Label/ExampleOptional.js\": 23,\n\t\"./Label/ExampleRequired\": 24,\n\t\"./Label/ExampleRequired.js\": 24,\n\t\"./PasswordInput/ExampleAllFeatures\": 25,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 25,\n\t\"./ProgressBar/Example100PercentHeight20px\": 26,\n\t\"./ProgressBar/Example100PercentHeight20px.js\": 26,\n\t\"./ProgressBar/Example10Percent\": 27,\n\t\"./ProgressBar/Example10Percent.js\": 27,\n\t\"./ProgressBar/Example70Percent\": 28,\n\t\"./ProgressBar/Example70Percent.js\": 28,\n\t\"./RegistrationForm/Example\": 31,\n\t\"./RegistrationForm/Example.js\": 31,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOptional\": 30,\n\t\"./TextInput/ExampleOptional.js\": 30,\n\t\"./TextInputBEM/ExampleError\": 35,\n\t\"./TextInputBEM/ExampleError.js\": 35,\n\t\"./TextInputCSSModules/ExampleError\": 33,\n\t\"./TextInputCSSModules/ExampleError.js\": 33,\n\t\"./TextInputStyledComponents/ExampleError\": 32,\n\t\"./TextInputStyledComponents/ExampleError.js\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 48;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Navigation = ({ components }) => {\n  return (\n    <ul className=\"navigation\">\n      {components.map(name => {\n        return (\n          <li key={name}>\n            <a href={`#${name}`}>{name}</a>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage(\"javascript\", javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre\n        ref={ref => {\n          this.element = ref;\n        }}\n      >\n        <code>{this.props.children}</code>\n      </pre>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default CodeExample;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CodeExample from \"./CodeExample\";\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n\n    // Must use CommonJS require to dynamically require because ES5 Modules must be statically analyzable\n    const ExampleComponent = require(`./examples/${\n      this.props.componentName\n    }/${name}`).default;\n\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"#\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Example from \"./Example\";\nimport Props from \"./Props\";\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {examples.length > 0\n        ? examples.map(example => (\n            <Example\n              key={example.code}\n              example={example}\n              componentName={name}\n            />\n          ))\n        : \"No examples exist.\"}\n\n      <h3>Props</h3>\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\n    </div>\n  );\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport ComponentPage from \"./ComponentPage\";\nimport componentData from \"../../config/componentData\";\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState({ route: window.location.hash.substr(1) });\n    });\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route\n      ? componentData.filter(component => component.name === route)[0]\n      : componentData[0];\n\n    return (\n      <div>\n        <Navigation\n          components={componentData.map(component => component.name)}\n        />\n        <ComponentPage component={component} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/highlight.js/styles/nord.css\";\n\nReactDOM.render(<Docs />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}