(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,function(e,n,t){"use strict";var r=t(0),a=t.n(r),o=function(e){var n=e.htmlFor,t=e.label,r=e.required;return a.a.createElement("label",{style:{display:"block"},htmlFor:n},t," ",r&&a.a.createElement("span",{style:{color:"red"}},"*"))};t.d(n,"a",function(){return o})},,function(e,n,t){"use strict";var r=t(1),a=t(2),o=t(4),i=t(3),s=t(5),l=t(0),p=t.n(l),u=function(e,n){return parseInt(n*(e/100),10)},d=function(e){function n(){var e,t;Object(r.a)(this,n);for(var a=arguments.length,s=new Array(a),l=0;l<a;l++)s[l]=arguments[l];return(t=Object(o.a)(this,(e=Object(i.a)(n)).call.apply(e,[this].concat(s)))).getColor=function(){var e=t.props.percent;return 100===e?"green":e>50?"lightgreen":"red"},t.getWidthAsPercentOfTotalWidth=function(){var e=t.props,n=e.width,r=e.percent;return u(r,n)},t}return Object(s.a)(n,e),Object(a.a)(n,[{key:"render",value:function(){var e=this.props,n=e.width,t=e.height;return p.a.createElement("div",{style:{border:"solid 1px lightgray",width:n}},p.a.createElement("div",{style:{width:this.getWidthAsPercentOfTotalWidth(),height:t,backgroundColor:this.getColor()}}))}}]),n}(p.a.Component);d.defaultProps={height:5};var c=d;t.d(n,"a",function(){return c})},function(e,n,t){"use strict";var r=t(7),a=t(0),o=t.n(a),i=t(6),s=function(e){var n=e.htmlId,t=e.label,a=e.required,s=void 0!==a&&a,l=e.type,p=void 0===l?"text":l,u=e.name,d=e.placeholder,c=e.value,m=e.onChange,h=e.error,g=e.children,y=Object(r.a)(e,["htmlId","label","required","type","name","placeholder","value","onChange","error","children"]);return o.a.createElement("div",{style:{marginBottom:16}},o.a.createElement(i.a,{htmlFor:n,label:t,required:s}),o.a.createElement("input",Object.assign({id:n,type:p,name:u,placeholder:d,value:c,onChange:m,style:h&&{border:"solid 1px red"}},y)),g,h&&o.a.createElement("div",{className:"error",style:{color:"red"}},h))};t.d(n,"a",function(){return s})},,function(e,n,t){"use strict";var r=t(0),a=t.n(r),o=function(){return a.a.createElement("svg",{width:"16",height:"16",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22"},a.a.createElement("g",{transform:"matrix(.02146 0 0 .02146 1 1)",fill:"#4d4d4d"},a.a.createElement("path",{d:"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1"}),a.a.createElement("circle",{cx:"466.08",cy:"466.02",r:"134.5"})))};t.d(n,"a",function(){return o})},function(e,n,t){"use strict";var r=t(7),a=t(1),o=t(2),i=t(4),s=t(3),l=t(5),p=t(0),u=t.n(p),d=t(9),c=t(11),m=t(8),h=function(e){function n(e){var t;return Object(a.a)(this,n),(t=Object(i.a)(this,Object(s.a)(n).call(this,e))).toggleShowPassword=function(e){e&&e.preventDefault(),t.setState(function(e){return{showPassword:!e.showPassword}})},t.state={showPassword:!1},t}return Object(l.a)(n,e),Object(o.a)(n,[{key:"render",value:function(){var e=this.props,n=e.htmlId,t=e.label,a=e.name,o=e.placeholder,i=e.value,s=e.error,l=e.onChange,p=e.maxLength,h=e.showVisibilityToggle,g=e.quality,y=Object(r.a)(e,["htmlId","label","name","placeholder","value","error","onChange","maxLength","showVisibilityToggle","quality"]),f=this.state.showPassword;return u.a.createElement(d.a,Object.assign({htmlId:n,label:t,name:a,placeholder:o,value:i,maxLength:p,error:s,onChange:l,type:f?"text":"password",required:!0},y),h&&u.a.createElement("a",{href:"#",onClick:this.toggleShowPassword,style:{marginLeft:5}},u.a.createElement(c.a,null)),i.length>0&&g&&u.a.createElement(m.a,{percent:g,width:130}))}}]),n}(u.a.Component);h.defaultProps={maxLength:50,showVisibilityToggle:!1,label:"Password"};var g=h;t.d(n,"a",function(){return g})},function(e,n,t){e.exports={error:"textInput_error__3lLsy",inputError:"textInput_inputError__2y0zN",fieldset:"textInput_fieldset__15Kb2"}},,,,function(e,n){e.exports=[{name:"EyeIcon",description:"SVG Eye Icon",code:'import React from "react";\n\n/** SVG Eye Icon */\nconst EyeIcon = () => {\n  // Attribution: Fabi\xe1n Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg\n      width="16"\n      height="16"\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 22 22"\n    >\n      <g transform="matrix(.02146 0 0 .02146 1 1)" fill="#4d4d4d">\n        <path d="m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1" />\n        <circle cx="466.08" cy="466.02" r="134.5" />\n      </g>\n    </svg>\n  );\n};\n\nexport default EyeIcon;\n',examples:[{name:"Example",description:"",code:'import React from "react";\nimport EyeIcon from "ps-react-guiportooo/EyeIcon";\n\nconst Example = () => <EyeIcon />;\n\nexport default Example;\n'}]},{name:"HelloWorld",description:"A super lame component that says Hello with a custom message.",props:{message:{type:{name:"string"},required:!1,description:"Message to display",defaultValue:{value:'"World"',computed:!1}}},code:'import React from "react";\nimport Proptypes from "prop-types";\n\n/** A super lame component that says Hello with a custom message. */\nconst HelloWorld = ({ message }) => <div>Hello {message}</div>;\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: Proptypes.string\n};\n\nHelloWorld.defaultProps = {\n  message: "World"\n};\nexport default HelloWorld;\n',examples:[{name:"ExampleHelloWorld",description:"Custom message",code:'import React from "react";\nimport HelloWorld from "ps-react-guiportooo/HelloWorld";\n\n/** Custom message */\nconst ExampleHelloWorld = () => <HelloWorld message="Pluralsight viewers!" />;\n\nexport default ExampleHelloWorld;\n'}]},{name:"Label",description:"Label with required field display, htmlFor and block styling",props:{htmlFor:{type:{name:"string"},required:!0,description:"HTML ID for associated input"},label:{type:{name:"string"},required:!0,description:"Label text"},required:{type:{name:"bool"},required:!1,description:"Display asterisk after label if true"}},code:'import React from "react";\nimport PropTypes from "prop-types";\n\n/** Label with required field display, htmlFor and block styling */\nconst Label = ({ htmlFor, label, required }) => (\n  <label style={{ display: "block" }} htmlFor={htmlFor}>\n    {label} {required && <span style={{ color: "red" }}>*</span>}\n  </label>\n);\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n  /** Label text */\n  label: PropTypes.string.isRequired,\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n',examples:[{name:"ExampleOptional",description:"",code:'import React from "react";\nimport Label from "ps-react-guiportooo/Label";\n\nconst ExampleOptional = () => <Label htmlFor="test" label="test" />;\n\nexport default ExampleOptional;\n'},{name:"ExampleRequired",description:"",code:'import React from "react";\nimport Label from "ps-react-guiportooo/Label";\n\nconst ExampleRequired = () => <Label htmlFor="test" label="test" required />;\n\nexport default ExampleRequired;\n'}]},{name:"PasswordInput",description:"Password input with integrated label, quality tips, and show password toggle.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},label:{type:{name:"string"},required:!1,description:"Input label",defaultValue:{value:'"Password"',computed:!1}},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},placeholder:{type:{name:"string"},required:!1,description:"Placeholder displayed when no password is entered"},value:{type:{name:"any"},required:!1,description:"Password value"},maxLength:{type:{name:"number"},required:!1,description:"Max password length accepted",defaultValue:{value:"50",computed:!1}},onChange:{type:{name:"func"},required:!0,description:"Function called when password input value changes"},quality:{type:{name:"number"},required:!1,description:"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},error:{type:{name:"string"},required:!1,description:"Validation error to display"},showVisibilityToggle:{type:{name:"bool"},required:!1,description:"Set to true to show the toggle for displaying the currently entered password",defaultValue:{value:"false",computed:!1}}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport TextInput from "../TextInput";\nimport EyeIcon from "../EyeIcon";\nimport ProgressBar from "../ProgressBar";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  static propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n    /** Input label */\n    label: PropTypes.string,\n    /** Input name. Recommend setting this to match object\'s property so a single change handler can be used by convention.*/\n    name: PropTypes.string.isRequired,\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n    /** Password value */\n    value: PropTypes.any,\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n    /** Validation error to display */\n    error: PropTypes.string,\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool\n  };\n\n  static defaultProps = {\n    maxLength: 50,\n    showVisibilityToggle: false,\n    label: "Password"\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showPassword: false\n    };\n  }\n\n  toggleShowPassword = event => {\n    if (event) event.preventDefault();\n\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n  };\n\n  render() {\n    const {\n      htmlId,\n      label,\n      name,\n      placeholder,\n      value,\n      error,\n      onChange,\n      maxLength,\n      showVisibilityToggle,\n      quality,\n      ...props\n    } = this.props;\n\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        onChange={onChange}\n        type={showPassword ? "text" : "password"}\n        required\n        {...props}\n      >\n        {showVisibilityToggle && (\n          <a\n            href="#"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            <EyeIcon />\n          </a>\n        )}\n        {value.length > 0 && quality && (\n          <ProgressBar percent={quality} width={130} />\n        )}\n      </TextInput>\n    );\n  }\n}\n\nexport default PasswordInput;\n',examples:[{name:"ExampleAllFeatures",description:"",code:'import React from "react";\nimport PasswordInput from "ps-react-guiportooo/PasswordInput";\n\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ""\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  handleChange = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    const { password } = this.state;\n\n    return (\n      <div>\n        <PasswordInput\n          htmlId="example-all-features"\n          name="password"\n          placeholder="Enter password"\n          minLength={8}\n          value={password}\n          showVisibilityToggle\n          onChange={this.handleChange}\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n'}]},{name:"ProgressBar",description:"",props:{percent:{type:{name:"number"},required:!0,description:"Percent of progress completed"},width:{type:{name:"number"},required:!0,description:"Bar width"},height:{type:{name:"number"},required:!1,description:"Bar height",defaultValue:{value:"5",computed:!1}}},code:'import React from "react";\nimport PropTypes from "prop-types";\n\nclass ProgressBar extends React.Component {\n  static propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n    /** Bar height */\n    height: PropTypes.number\n  };\n\n  static defaultProps = {\n    height: 5\n  };\n\n  getColor = () => {\n    const { percent } = this.props;\n    if (percent === 100) return "green";\n    return percent > 50 ? "lightgreen" : "red";\n  };\n\n  getWidthAsPercentOfTotalWidht = () => {\n    const { width, percent } = this.props;\n    return parseInt(width * (percent / 100), 10);\n  };\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <div style={{ border: "solid 1px lightgray", width }}>\n        <div\n          style={{\n            width: this.getWidthAsPercentOfTotalWidht(),\n            height,\n            backgroundColor: this.getColor()\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ProgressBar;\n',examples:[{name:"Example100PercentHeight20px",description:"100% progress and height 20px",code:'import React from "react";\nimport ProgressBar from "ps-react-guiportooo/ProgressBar";\n\n/** 100% progress and height 20px */\nconst Example100PercentHeight20px = () => (\n  <ProgressBar percent={100} width={150} height={20} />\n);\n\nexport default Example100PercentHeight20px;\n'},{name:"Example10Percent",description:"10% progress",code:'import React from "react";\nimport ProgressBar from "ps-react-guiportooo/ProgressBar";\n\n/** 10% progress */\nconst Example10Percent = () => <ProgressBar percent={10} width={150} />;\n\nexport default Example10Percent;\n'},{name:"Example70Percent",description:"70% progress",code:'import React from "react";\nimport ProgressBar from "ps-react-guiportooo/ProgressBar";\n\n/** 70% progress */\nconst Example70Percent = () => <ProgressBar percent={70} width={150} />;\n\nexport default Example70Percent;\n'}]},{name:"RegistrationForm",description:"Registration form with built-in validation.",props:{confirmationMessage:{type:{name:"string"},required:!1,description:"Message displayed upon successful submission",defaultValue:{value:'"Thanks for registering!"',computed:!1}},onSubmit:{type:{name:"func"},required:!0,description:"Called when form is submitted"},minPasswordLength:{type:{name:"number"},required:!1,description:"Minimum password length",defaultValue:{value:"8",computed:!1}}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport TextInput from "../TextInput";\nimport PasswordInput from "../PasswordInput";\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  static propTypes = {\n    /** Message displayed upon successful submission */\n    confirmationMessage: PropTypes.string,\n    /** Called when form is submitted */\n    onSubmit: PropTypes.func.isRequired,\n    /** Minimum password length */\n    minPasswordLength: PropTypes.number\n  };\n\n  static defaultProps = {\n    confirmationMessage: "Thanks for registering!",\n    minPasswordLength: 8\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: "",\n        password: ""\n      },\n      errors: {},\n      submitted: false\n    };\n  }\n\n  onChange = event => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  };\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    const { minPasswordLength } = this.props;\n\n    if (password.length >= minPasswordLength) return 100;\n\n    const percentageOfMinLength = parseInt(\n      (password.length / minPasswordLength) * 100,\n      10\n    );\n    return percentageOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = "Email required";\n    if (password.length < minPasswordLength)\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  };\n\n  render() {\n    const { confirmationMessage } = this.props;\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return submitted ? (\n      <h2>{confirmationMessage}</h2>\n    ) : (\n      <form>\n        <TextInput\n          htmlId="registration-form-email"\n          name="email"\n          label="Email"\n          value={email}\n          error={errors.email}\n          onChange={this.onChange}\n          required\n        />\n        <PasswordInput\n          htmlId="registration-form-password"\n          name="password"\n          value={password}\n          maxLength={50}\n          quality={this.passwordQuality(password)}\n          error={errors.password}\n          onChange={this.onChange}\n          showVisibilityToggle\n        />\n        <input type="submit" value="Register" onClick={this.onSubmit} />\n      </form>\n    );\n  }\n}\n\nexport default RegistrationForm;\n',examples:[{name:"Example",description:"",code:'import React from "react";\nimport RegistrationForm from "ps-react-guiportooo/RegistrationForm";\n\nconst Example = () => {\n  const onSubmit = user => console.log(user);\n\n  return <RegistrationForm onSubmit={onSubmit} />;\n};\n\nexport default Example;\n'}]},{name:"TextInput",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},label:{type:{name:"string"},required:!0,description:"Input label"},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},type:{type:{name:"enum",value:[{value:'"text"',computed:!1},{value:'"number"',computed:!1},{value:'"password"',computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport Label from "../Label";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInput = ({\n  htmlId,\n  label,\n  required = false,\n  type = "text",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <div style={{ marginBottom: 16 }}>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      style={error && { border: "solid 1px red" }}\n      {...props}\n    />\n    {children}\n    {error && (\n      <div className="error" style={{ color: "red" }}>\n        {error}\n      </div>\n    )}\n  </div>\n);\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf(["text", "number", "password"]),\n  /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n',examples:[{name:"ExampleError",description:"Required TextInput with error",code:'import React from "react";\nimport TextInput from "ps-react-guiportooo/TextInput";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInput\n    htmlId="example-error"\n    label="First Name"\n    name="firstname"\n    onChange={() => {}}\n    required\n    error="First name is required."\n  />\n);\n\nexport default ExampleError;\n'},{name:"ExampleOptional",description:"Optional TextInput",code:'import React from "react";\nimport TextInput from "ps-react-guiportooo/TextInput";\n\n/** Optional TextInput */\nconst ExampleOptional = () => (\n  <TextInput\n    htmlId="example-optional"\n    label="First Name"\n    name="firstname"\n    onChange={() => {}}\n  />\n);\n\nexport default ExampleOptional;\n'}]},{name:"TextInputBEM",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},label:{type:{name:"string"},required:!0,description:"Input label"},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},type:{type:{name:"enum",value:[{value:'"text"',computed:!1},{value:'"number"',computed:!1},{value:'"password"',computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport Label from "../Label";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInputBEM = ({\n  htmlId,\n  label,\n  required = false,\n  type = "text",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <div className="textinput">\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={error && "textinput__input--state-error"}\n      {...props}\n    />\n    {children}\n    {error && <div className="textinput__error">{error}</div>}\n  </div>\n);\n\nTextInputBEM.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf(["text", "number", "password"]),\n  /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputBEM;\n',examples:[{name:"ExampleError",description:"Required TextInput with error",code:'import React from "react";\nimport TextInputBEM from "ps-react-guiportooo/TextInputBEM";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInputBEM\n    htmlId="example-error"\n    label="First Name"\n    name="firstname"\n    onChange={() => {}}\n    required\n    error="First name is required."\n  />\n);\n\nexport default ExampleError;\n'}]},{name:"TextInputCSSModules",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},label:{type:{name:"string"},required:!0,description:"Input label"},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},type:{type:{name:"enum",value:[{value:'"text"',computed:!1},{value:'"number"',computed:!1},{value:'"password"',computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport Label from "../Label";\nimport styles from "./textInput.module.css";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInputCSSModules = ({\n  htmlId,\n  label,\n  required = false,\n  type = "text",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <div className={styles.fieldset}>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={error && styles.inputError}\n      {...props}\n    />\n    {children}\n    {error && <div className={styles.error}>{error}</div>}\n  </div>\n);\n\nTextInputCSSModules.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf(["text", "number", "password"]),\n  /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputCSSModules;\n',examples:[{name:"ExampleError",description:"Required TextInput with error",code:'import React from "react";\nimport TextInputCSSModules from "ps-react-guiportooo/TextInputCSSModules";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInputCSSModules\n    htmlId="example-error"\n    label="First Name"\n    name="firstname"\n    onChange={() => {}}\n    required\n    error="First name is required."\n  />\n);\n\nexport default ExampleError;\n'}]},{name:"TextInputStyledComponents",description:"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.",props:{htmlId:{type:{name:"string"},required:!0,description:"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},label:{type:{name:"string"},required:!0,description:"Input label"},required:{type:{name:"bool"},required:!1,description:"Mark label with asterisk if set to true",defaultValue:{value:"false",computed:!1}},type:{type:{name:"enum",value:[{value:'"text"',computed:!1},{value:'"number"',computed:!1},{value:'"password"',computed:!1}]},required:!1,description:"Input type",defaultValue:{value:'"text"',computed:!1}},name:{type:{name:"string"},required:!0,description:"Input name. Recommend setting this to match object's property so a single change handler can be used."},placeholder:{type:{name:"string"},required:!1,description:"Placeholder to display when empty"},value:{type:{name:"any"},required:!1,description:"Value"},onChange:{type:{name:"func"},required:!0,description:"Function to call onChange"},error:{type:{name:"string"},required:!1,description:"String to display when error occurs"},children:{type:{name:"node"},required:!1,description:"Child component to display next to the input"}},code:'import React from "react";\nimport PropTypes from "prop-types";\nimport Label from "../Label";\nimport styled from "styled-components";\n\nconst Fieldset = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst Input = styled.input`\n  display: block;\n  border: ${props => props.error && "solid 1px red"};\n`;\n\nconst Error = styled.div`\n  color: red;\n`;\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nconst TextInputStyledComponents = ({\n  htmlId,\n  label,\n  required = false,\n  type = "text",\n  name,\n  placeholder,\n  value,\n  onChange,\n  error,\n  children,\n  ...props\n}) => (\n  <Fieldset>\n    <Label htmlFor={htmlId} label={label} required={required} />\n    <Input\n      id={htmlId}\n      type={type}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      error={error}\n      {...props}\n    />\n    {children}\n    {error && <Error>{error}</Error>}\n  </Fieldset>\n);\n\nTextInputStyledComponents.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n  /** Input label */\n  label: PropTypes.string.isRequired,\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n  /** Input type */\n  type: PropTypes.oneOf(["text", "number", "password"]),\n  /** Input name. Recommend setting this to match object\'s property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n  /** Value */\n  value: PropTypes.any,\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n  /** String to display when error occurs */\n  error: PropTypes.string,\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInputStyledComponents;\n',examples:[{name:"ExampleError",description:"Required TextInput with error",code:'import React from "react";\nimport TextInputStyledComponents from "ps-react-guiportooo/TextInputStyledComponents";\n\n/** Required TextInput with error */\nconst ExampleError = () => (\n  <TextInputStyledComponents\n    htmlId="example-error"\n    label="First Name"\n    name="firstname"\n    onChange={() => {}}\n    required\n    error="First name is required."\n  />\n);\n\nexport default ExampleError;\n'}]}]},,,,,function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(11);n.default=function(){return a.a.createElement(o.a,null)}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(6);n.default=function(){return a.a.createElement(o.a,{htmlFor:"test",label:"test"})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(6);n.default=function(){return a.a.createElement(o.a,{htmlFor:"test",label:"test",required:!0})}},function(e,n,t){"use strict";t.r(n);var r=t(1),a=t(2),o=t(4),i=t(3),s=t(5),l=t(0),p=t.n(l),u=t(12),d=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(o.a)(this,Object(i.a)(n).call(this,e))).handleChange=function(e){t.setState({password:e.target.value})},t.state={password:""},t}return Object(s.a)(n,e),Object(a.a)(n,[{key:"getQuality",value:function(){var e=this.state.password.length;return e>10?100:10*e}},{key:"render",value:function(){var e=this.state.password;return p.a.createElement("div",null,p.a.createElement(u.a,Object.assign({htmlId:"example-all-features",name:"password",placeholder:"Enter password",minLength:8,value:e,showVisibilityToggle:!0,onChange:this.handleChange,quality:this.getQuality()},this.props)))}}]),n}(p.a.Component);n.default=d},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(8);n.default=function(){return a.a.createElement(o.a,{percent:100,width:150,height:20})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(8);n.default=function(){return a.a.createElement(o.a,{percent:10,width:150})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(8);n.default=function(){return a.a.createElement(o.a,{percent:70,width:150})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(9);n.default=function(){return a.a.createElement(o.a,{htmlId:"example-error",label:"First Name",name:"firstname",onChange:function(){},required:!0,error:"First name is required."})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(9);n.default=function(){return a.a.createElement(o.a,{htmlId:"example-optional",label:"First Name",name:"firstname",onChange:function(){}})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(1),i=t(2),s=t(4),l=t(3),p=t(5),u=t(9),d=t(12),c=function(e){function n(e){var t;return Object(o.a)(this,n),(t=Object(s.a)(this,Object(l.a)(n).call(this,e))).onChange=function(e){var n=t.state.user;n[e.target.name]=e.target.value,t.setState({user:n})},t.onSubmit=function(){var e=t.state.user;t.validate(e)&&(t.props.onSubmit(e),t.setState({submitted:!0}))},t.state={user:{email:"",password:""},errors:{},submitted:!1},t}return Object(p.a)(n,e),Object(i.a)(n,[{key:"passwordQuality",value:function(e){if(!e)return null;var n=this.props.minPasswordLength;return e.length>=n?100:parseInt(e.length/n*100,10)}},{key:"validate",value:function(e){var n=e.email,t=e.password,r={},a=this.props.minPasswordLength;return n||(r.email="Email required"),t.length<a&&(r.password="Password must be at least ".concat(a," characters.")),this.setState({errors:r}),0===Object.getOwnPropertyNames(r).length}},{key:"render",value:function(){var e=this.props.confirmationMessage,n=this.state,t=n.errors,r=n.submitted,o=this.state.user,i=o.email,s=o.password;return r?a.a.createElement("h2",null,e):a.a.createElement("form",null,a.a.createElement(u.a,{htmlId:"registration-form-email",name:"email",label:"Email",value:i,error:t.email,onChange:this.onChange,required:!0}),a.a.createElement(d.a,{htmlId:"registration-form-password",name:"password",value:s,maxLength:50,quality:this.passwordQuality(s),error:t.password,onChange:this.onChange,showVisibilityToggle:!0}),a.a.createElement("input",{type:"submit",value:"Register",onClick:this.onSubmit}))}}]),n}(a.a.Component);c.defaultProps={confirmationMessage:"Thanks for registering!",minPasswordLength:8};var m=c;n.default=function(){return a.a.createElement(m,{onSubmit:function(e){return console.log(e)}})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(7),i=t(14),s=t(6),l=t(15);function p(){var e=Object(i.a)(["\n  color: red;\n"]);return p=function(){return e},e}function u(){var e=Object(i.a)(["\n  display: block;\n  border: ",";\n"]);return u=function(){return e},e}function d(){var e=Object(i.a)(["\n  margin-bottom: 16px;\n"]);return d=function(){return e},e}var c=l.a.div(d()),m=l.a.input(u(),function(e){return e.error&&"solid 1px red"}),h=l.a.div(p()),g=function(e){var n=e.htmlId,t=e.label,r=e.required,i=void 0!==r&&r,l=e.type,p=void 0===l?"text":l,u=e.name,d=e.placeholder,g=e.value,y=e.onChange,f=e.error,b=e.children,x=Object(o.a)(e,["htmlId","label","required","type","name","placeholder","value","onChange","error","children"]);return a.a.createElement(c,null,a.a.createElement(s.a,{htmlFor:n,label:t,required:i}),a.a.createElement(m,Object.assign({id:n,type:p,name:u,placeholder:d,value:g,onChange:y,error:f},x)),b,f&&a.a.createElement(h,null,f))};n.default=function(){return a.a.createElement(g,{htmlId:"example-error",label:"First Name",name:"firstname",onChange:function(){},required:!0,error:"First name is required."})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(7),i=t(6),s=t(13),l=t.n(s),p=function(e){var n=e.htmlId,t=e.label,r=e.required,s=void 0!==r&&r,p=e.type,u=void 0===p?"text":p,d=e.name,c=e.placeholder,m=e.value,h=e.onChange,g=e.error,y=e.children,f=Object(o.a)(e,["htmlId","label","required","type","name","placeholder","value","onChange","error","children"]);return a.a.createElement("div",{className:l.a.fieldset},a.a.createElement(i.a,{htmlFor:n,label:t,required:s}),a.a.createElement("input",Object.assign({id:n,type:u,name:d,placeholder:c,value:m,onChange:h,className:g&&l.a.inputError},f)),y,g&&a.a.createElement("div",{className:l.a.error},g))};n.default=function(){return a.a.createElement(p,{htmlId:"example-error",label:"First Name",name:"firstname",onChange:function(){},required:!0,error:"First name is required."})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=function(e){var n=e.message;return a.a.createElement("div",null,"Hello ",n)};o.defaultProps={message:"World"};var i=o;n.default=function(){return a.a.createElement(i,{message:"Pluralsight viewers!"})}},function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=(t(49),t(7)),i=t(6),s=function(e){var n=e.htmlId,t=e.label,r=e.required,s=void 0!==r&&r,l=e.type,p=void 0===l?"text":l,u=e.name,d=e.placeholder,c=e.value,m=e.onChange,h=e.error,g=e.children,y=Object(o.a)(e,["htmlId","label","required","type","name","placeholder","value","onChange","error","children"]);return a.a.createElement("div",{className:"textinput"},a.a.createElement(i.a,{htmlFor:n,label:t,required:s}),a.a.createElement("input",Object.assign({id:n,type:p,name:u,placeholder:d,value:c,onChange:m,className:h&&"textinput__input--state-error"},y)),g,h&&a.a.createElement("div",{className:"textinput__error"},h))};n.default=function(){return a.a.createElement(s,{htmlId:"example-error",label:"First Name",name:"firstname",onChange:function(){},required:!0,error:"First name is required."})}},,,,,function(e,n,t){e.exports=t(60)},,,,,,function(e,n,t){},,function(e,n,t){var r={"./EyeIcon/Example":22,"./EyeIcon/Example.js":22,"./HelloWorld/ExampleHelloWorld":34,"./HelloWorld/ExampleHelloWorld.js":34,"./Label/ExampleOptional":23,"./Label/ExampleOptional.js":23,"./Label/ExampleRequired":24,"./Label/ExampleRequired.js":24,"./PasswordInput/ExampleAllFeatures":25,"./PasswordInput/ExampleAllFeatures.js":25,"./ProgressBar/Example100PercentHeight20px":26,"./ProgressBar/Example100PercentHeight20px.js":26,"./ProgressBar/Example10Percent":27,"./ProgressBar/Example10Percent.js":27,"./ProgressBar/Example70Percent":28,"./ProgressBar/Example70Percent.js":28,"./RegistrationForm/Example":31,"./RegistrationForm/Example.js":31,"./TextInput/ExampleError":29,"./TextInput/ExampleError.js":29,"./TextInput/ExampleOptional":30,"./TextInput/ExampleOptional.js":30,"./TextInputBEM/ExampleError":35,"./TextInputBEM/ExampleError.js":35,"./TextInputCSSModules/ExampleError":33,"./TextInputCSSModules/ExampleError.js":33,"./TextInputStyledComponents/ExampleError":32,"./TextInputStyledComponents/ExampleError.js":32};function a(e){var n=o(e);return t(n)}function o(e){var n=r[e];if(!(n+1)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=48},function(e,n,t){},,,,,,,,,,,function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(10),i=t.n(o),s=(t(46),t(1)),l=t(2),p=t(4),u=t(3),d=t(5),c=function(e){var n=e.components;return a.a.createElement("ul",{className:"navigation"},n.map(function(e){return a.a.createElement("li",{key:e},a.a.createElement("a",{href:"#".concat(e)},e))}))},m=t(18),h=t.n(m),g=t(36),y=t.n(g),f=function(e){function n(){return Object(s.a)(this,n),Object(p.a)(this,Object(u.a)(n).apply(this,arguments))}return Object(d.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){h.a.registerLanguage("javascript",y.a),h.a.highlightBlock(this.element)}},{key:"render",value:function(){var e=this;return a.a.createElement("pre",{ref:function(n){e.element=n}},a.a.createElement("code",null,this.props.children))}}]),n}(a.a.Component),b=function(e){function n(e){var t;return Object(s.a)(this,n),(t=Object(p.a)(this,Object(u.a)(n).call(this,e))).toggleCode=function(e){e.preventDefault(),t.setState(function(e){return{showCode:!e.showCode}})},t.state={showCode:!1},t}return Object(d.a)(n,e),Object(l.a)(n,[{key:"render",value:function(){var e=this.state.showCode,n=this.props.example,r=n.code,o=n.description,i=n.name,s=t(48)("./".concat(this.props.componentName,"/").concat(i)).default;return a.a.createElement("div",{className:"example"},o&&a.a.createElement("h4",null,o),a.a.createElement(s,null),a.a.createElement("p",null,a.a.createElement("a",{href:"#",onClick:this.toggleCode},e?"Hide":"Show"," Code")),e&&a.a.createElement(f,null,r))}}]),n}(a.a.Component),x=function(e){var n=e.props;return a.a.createElement("table",{className:"props"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Name"),a.a.createElement("th",null,"Description"),a.a.createElement("th",null,"Type"),a.a.createElement("th",null,"Default"),a.a.createElement("th",null,"Required"))),a.a.createElement("tbody",null,Object.keys(n).map(function(e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,e),a.a.createElement("td",null,n[e].description),a.a.createElement("td",null,n[e].type.name),a.a.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value),a.a.createElement("td",null,n[e].required&&"X"))})))},w=function(e){var n=e.component,t=n.name,r=n.description,o=n.props,i=n.examples;return a.a.createElement("div",{className:"componentpage"},a.a.createElement("h2",null,t),a.a.createElement("p",null,r),a.a.createElement("h3",null,"Example",i.length>1&&"s"),i.length>0?i.map(function(e){return a.a.createElement(b,{key:e.code,example:e,componentName:t})}):"No examples exist.",a.a.createElement("h3",null,"Props"),o?a.a.createElement(x,{props:o}):"This component accepts no props.")},v=t(17),E=t.n(v),q=function(e){function n(e){var t;return Object(s.a)(this,n),(t=Object(p.a)(this,Object(u.a)(n).call(this,e))).state={route:window.location.hash.substr(1)},t}return Object(d.a)(n,e),Object(l.a)(n,[{key:"componentDidMount",value:function(){var e=this;window.addEventListener("hashchange",function(){e.setState({route:window.location.hash.substr(1)})})}},{key:"render",value:function(){var e=this.state.route,n=e?E.a.filter(function(n){return n.name===e})[0]:E.a[0];return a.a.createElement("div",null,a.a.createElement(c,{components:E.a.map(function(e){return e.name})}),a.a.createElement(w,{component:n}))}}]),n}(a.a.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));t(58);i.a.render(a.a.createElement(q,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[40,2,1]]]);
//# sourceMappingURL=main.bb56d5fd.chunk.js.map